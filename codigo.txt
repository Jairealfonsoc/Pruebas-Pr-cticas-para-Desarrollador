# I will now create a .txt file with all the project-related code content mentioned in the conversation.

code_content = """
### Backend (Node.js - Express.js)

```javascript
const express = require('express');
const nodemailer = require('nodemailer');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { body, validationResult } = require('express-validator');
const Sala = require('./models/Sala');
const Reserva = require('./models/Reserva');
const Usuario = require('./models/Usuario');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost/salas', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Middleware de autenticación JWT
const authMiddleware = (req, res, next) => {
    const token = req.header('x-auth-token');
    if (!token) return res.status(401).json({ msg: 'No token, autorización denegada' });

    try {
        const decoded = jwt.verify(token, 'your_jwt_secret');
        req.user = decoded.user;
        next();
    } catch (err) {
        res.status(401).json({ msg: 'Token no es válido' });
    }
};

// Modelo de Sala
const salaSchema = new mongoose.Schema({
    nombre: String,
    capacidad: Number,
    recursos: [String],
    ubicacion: String,
});
const Sala = mongoose.model('Sala', salaSchema);

// Modelo de Reserva
const reservaSchema = new mongoose.Schema({
    salaId: { type: mongoose.Schema.Types.ObjectId, ref: 'Sala' },
    usuario: String,
    fecha: Date,
    duracion: Number,
});
const Reserva = mongoose.model('Reserva', reservaSchema);

// Modelo de Usuario
const usuarioSchema = new mongoose.Schema({
    nombre: String,
    email: String,
    password: String,
    rol: { type: String, enum: ['admin', 'empleado'], default: 'empleado' },
});
const Usuario = mongoose.model('Usuario', usuarioSchema);

// Rutas de gestión de salas
app.post('/salas', authMiddleware, async (req, res) => {
    const { nombre, capacidad, recursos, ubicacion } = req.body;
    const nuevaSala = new Sala({ nombre, capacidad, recursos, ubicacion });
    await nuevaSala.save();
    res.json(nuevaSala);
});

app.get('/salas', async (req, res) => {
    const salas = await Sala.find();
    res.json(salas);
});

// Sistema de reservas
app.post('/reservas', [
    body('salaId').notEmpty().withMessage('Sala ID es requerido'),
    body('usuario').notEmpty().withMessage('Usuario es requerido'),
    body('fecha').isISO8601().withMessage('Fecha no válida'),
    body('duracion').isInt({ gt: 0 }).withMessage('Duración debe ser un número positivo'),
], authMiddleware, async (req, res) => {
    const errores = validationResult(req);
    if (!errores.isEmpty()) {
        return res.status(400).json({ errors: errores.array() });
    }
    
    const nuevaReserva = new Reserva(req.body);
    await nuevaReserva.save();
    res.json(nuevaReserva);
});

// Notificaciones de reservas
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'tuemail@gmail.com',
        pass: 'tucontraseña',
    },
});

app.post('/notificar', authMiddleware, async (req, res) => {
    const { to, subject, text } = req.body;
    const mailOptions = {
        from: 'tuemail@gmail.com',
        to,
        subject,
        text,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return res.status(500).json({ msg: 'Error al enviar el correo', error });
        }
        res.json({ msg: 'Correo enviado', info });
    });
});

// Sistema de autenticación y roles
app.post('/register', async (req, res) => {
    const { nombre, email, password } = req.body;
    let usuario = await Usuario.findOne({ email });
    if (usuario) {
        return res.status(400).json({ msg: 'El usuario ya existe' });
    }

    usuario = new Usuario({ nombre, email, password });
    const salt = await bcrypt.genSalt(10);
    usuario.password = await bcrypt.hash(password, salt);

    await usuario.save();
    const payload = { user: { id: usuario.id } };
    const token = jwt.sign(payload, 'your_jwt_secret', { expiresIn: 3600 });
    res.json({ token });
});

app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    let usuario = await Usuario.findOne({ email });
    if (!usuario) {
        return res.status(400).json({ msg: 'Usuario no existe' });
    }

    const esMatch = await bcrypt.compare(password, usuario.password);
    if (!esMatch) {
        return res.status(400).json({ msg: 'Contraseña incorrecta' });
    }

    const payload = { user: { id: usuario.id } };
    const token = jwt.sign(payload, 'your_jwt_secret', { expiresIn: 3600 });
    res.json({ token });
});

// Reporte de uso
app.get('/reporte-uso', authMiddleware, async (req, res) => {
    const reservas = await Reserva.aggregate([
        { $group: { _id: '$salaId', totalReservas: { $sum: 1 }, totalHoras: { $sum: '$duracion' } } },
        { $lookup: { from: 'salas', localField: '_id', foreignField: '_id', as: 'sala' } },
    ]);
    res.json(reservas);
});

app.listen(5000, () => {
    console.log('Servidor corriendo en el puerto 5000');
});
Frontend (React.js)
javascript
Mostrar siempre los detalles

Copiar código
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Salas = () => {
    const [salas, setSalas] = useState([]);

    useEffect(() => {
        const obtenerSalas = async () => {
            const response = await axios.get('/salas');
            setSalas(response.data);
        };
        obtenerSalas();
    }, []);

    return (
        <div>
            <h1>Salas Disponibles</h1>
            <ul>
                {salas.map(sala => (
                    <li key={sala._id}>{sala.nombre} - Capacidad: {sala.capacidad}</li>
                ))}
            </ul>
        </div>
    );
};

const CrearReserva = () => {
    const [salaId, setSalaId] = useState('');
    const [usuario, setUsuario] = useState('');
    const [fecha, setFecha] = useState('');
    const [duracion, setDuracion] = useState('');

    const crearReserva = async () => {
        const nuevaReserva = { salaId, usuario, fecha, duracion };
        const response = await axios.post('/reservas', nuevaReserva);
        console.log(response.data);
    };

    return (
        <div>
            <h1>Crear Reserva</h1>
            <form onSubmit={crearReserva}>
                <input type="text" placeholder="Sala ID" value={salaId} onChange={e => setSalaId(e.target.value)} />
                <input type="text" placeholder="Usuario" value={usuario} onChange={e => setUsuario(e.target.value)} />
                <input type="date" value={fecha} onChange={e => setFecha(e.target.value)} />
                <input type="number" placeholder="Duración" value={duracion} onChange={e => setDuracion(e.target.value)} />
                <button type="submit">Reservar</button>
            </form>
        </div>
    );
};

export { Salas, CrearReserva };
